[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "app = Flask(__name__)\n# Configurar la aplicación usando la configuración del objeto Config\napp.config.from_object(Config)\n# Inicializar la base de datos\ntry:\n    db = SQLAlchemy(app)\nexcept Exception as e:\n    # Manejar errores de inicialización de la base de datos\n    print(f\"Error al inicializar la base de datos: {e}\")\n# Inicializar JWT",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "class Config:\n    SQLALCHEMY_DATABASE_URI = 'mysql+pymysql://root:secret@localhost/todo_app'\n    JWT_SECRET_KEY = 'your_jwt_secret_key'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class User(db.Model):\n    \"\"\"\n    Modelo de usuario para la base de datos.\n    \"\"\"\n    __tablename__ = \"users\"\n    id = db.Column(db.String(6), primary_key=True)\n    email = db.Column(db.String(255), unique=True, nullable=False)\n    password = db.Column(db.String(255), nullable=False)\n    def __init__(self, email, password, id):\n        \"\"\"",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class Task(db.Model):\n    \"\"\"\n    Modelo de tarea para la base de datos.\n    \"\"\"\n    __tablename__ = \"tasks\"\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.String(6), db.ForeignKey(\"users.id\"), nullable=False)\n    title = db.Column(db.String(255), nullable=False)\n    description = db.Column(db.Text, nullable=False)\n    status = db.Column(",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nclass User(db.Model):\n    \"\"\"\n    Modelo de usuario para la base de datos.\n    \"\"\"\n    __tablename__ = \"users\"\n    id = db.Column(db.String(6), primary_key=True)\n    email = db.Column(db.String(255), unique=True, nullable=False)\n    password = db.Column(db.String(255), nullable=False)\n    def __init__(self, email, password, id):",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "backend.routes",
        "description": "backend.routes",
        "peekOfCode": "def register():\n    \"\"\"\n    Registra un nuevo usuario.\n    Endpoint: /register\n    Método: POST\n    Datos de entrada (JSON):\n        - email: Dirección de correo electrónico del usuario.\n        - password: Contraseña del usuario.\n    Retorna:\n        - Un token de acceso JWT si el registro es exitoso.",
        "detail": "backend.routes",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "backend.routes",
        "description": "backend.routes",
        "peekOfCode": "def login():\n    \"\"\"\n    Inicia sesión de un usuario.\n    Endpoint: /login\n    Método: POST\n    Datos de entrada (JSON):\n        - email: Dirección de correo electrónico del usuario.\n        - password: Contraseña del usuario.\n    Retorna:\n        - Un token de acceso JWT si las credenciales son correctas.",
        "detail": "backend.routes",
        "documentation": {}
    },
    {
        "label": "get_all_tasks",
        "kind": 2,
        "importPath": "backend.routes",
        "description": "backend.routes",
        "peekOfCode": "def get_all_tasks():\n    \"\"\"\n    Obtiene todas las tareas del usuario autenticado.\n    Endpoint: /tasks\n    Método: GET\n    Retorna:\n        - Una lista de tareas del usuario autenticado.\n        - Código de estado 200 si la solicitud es exitosa.\n    \"\"\"\n    user_id = get_jwt_identity()",
        "detail": "backend.routes",
        "documentation": {}
    },
    {
        "label": "add_task",
        "kind": 2,
        "importPath": "backend.routes",
        "description": "backend.routes",
        "peekOfCode": "def add_task():\n    \"\"\"\n    Agrega una nueva tarea para el usuario autenticado.\n    Endpoint: /tasks\n    Método: POST\n    Datos de entrada (JSON):\n        - title: Título de la tarea.\n        - description: Descripción de la tarea.\n    Retorna:\n        - Un mensaje de confirmación.",
        "detail": "backend.routes",
        "documentation": {}
    },
    {
        "label": "update_task",
        "kind": 2,
        "importPath": "backend.routes",
        "description": "backend.routes",
        "peekOfCode": "def update_task(task_id):\n    \"\"\"\n    Actualiza una tarea existente del usuario autenticado.\n    Endpoint: /tasks/<int:task_id>\n    Método: PUT\n    Datos de entrada (JSON):\n        - title: Nuevo título de la tarea (opcional).\n        - description: Nueva descripción de la tarea (opcional).\n        - status: Nuevo estado de la tarea (opcional).\n    Retorna:",
        "detail": "backend.routes",
        "documentation": {}
    },
    {
        "label": "delete_task",
        "kind": 2,
        "importPath": "backend.routes",
        "description": "backend.routes",
        "peekOfCode": "def delete_task(task_id):\n    \"\"\"\n    Elimina una tarea existente del usuario autenticado.\n    Endpoint: /tasks/<int:task_id>\n    Método: DELETE\n    Retorna:\n        - Un mensaje de confirmación.\n        - Código de estado 200 si la tarea se elimina exitosamente.\n        - Código de estado 404 si la tarea no se encuentra.\n    \"\"\"",
        "detail": "backend.routes",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "backend.routes",
        "description": "backend.routes",
        "peekOfCode": "def home():\n    \"\"\"\n    Endpoint de prueba para verificar que el servidor está funcionando.\n    Endpoint: /\n    Método: GET\n    Retorna:\n        - Un mensaje de bienvenida.\n        - Código de estado 200 si la solicitud es exitosa.\n    \"\"\"\n    return jsonify({\"msg\": \"Hello, World !!\"}), 200",
        "detail": "backend.routes",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "backend.routes",
        "description": "backend.routes",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n@app.route('/register', methods=['POST'])\ndef register():\n    \"\"\"\n    Registra un nuevo usuario.\n    Endpoint: /register\n    Método: POST\n    Datos de entrada (JSON):\n        - email: Dirección de correo electrónico del usuario.\n        - password: Contraseña del usuario.",
        "detail": "backend.routes",
        "documentation": {}
    }
]