[
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "swagger",
        "importPath": "flask_swagger",
        "description": "flask_swagger",
        "isExtraImport": true,
        "detail": "flask_swagger",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_task",
        "importPath": "app.services.task_services",
        "description": "app.services.task_services",
        "isExtraImport": true,
        "detail": "app.services.task_services",
        "documentation": {}
    },
    {
        "label": "get_tasks",
        "importPath": "app.services.task_services",
        "description": "app.services.task_services",
        "isExtraImport": true,
        "detail": "app.services.task_services",
        "documentation": {}
    },
    {
        "label": "update_task",
        "importPath": "app.services.task_services",
        "description": "app.services.task_services",
        "isExtraImport": true,
        "detail": "app.services.task_services",
        "documentation": {}
    },
    {
        "label": "delete_task",
        "importPath": "app.services.task_services",
        "description": "app.services.task_services",
        "isExtraImport": true,
        "detail": "app.services.task_services",
        "documentation": {}
    },
    {
        "label": "create_user",
        "importPath": "app.services.user_services",
        "description": "app.services.user_services",
        "isExtraImport": true,
        "detail": "app.services.user_services",
        "documentation": {}
    },
    {
        "label": "access_user",
        "importPath": "app.services.user_services",
        "description": "app.services.user_services",
        "isExtraImport": true,
        "detail": "app.services.user_services",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "app.models.task",
        "description": "app.models.task",
        "isExtraImport": true,
        "detail": "app.models.task",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "backend.app.models.task",
        "description": "backend.app.models.task",
        "peekOfCode": "class Task(db.Model):\n    \"\"\"\n    Modelo de tarea para la base de datos.\n    \"\"\"\n    __tablename__ = \"tasks\"\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.String(6), db.ForeignKey(\"users.id\"), nullable=False)\n    title = db.Column(db.String(255), nullable=False)\n    date = db.Column(db.DateTime, nullable=False, default=datetime.datetime.now)\n    description = db.Column(db.Text, nullable=False)",
        "detail": "backend.app.models.task",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.app.models.user",
        "description": "backend.app.models.user",
        "peekOfCode": "class User(db.Model):\n    \"\"\"\n    Modelo de usuario para la base de datos.\n    \"\"\"\n    __tablename__ = \"users\"\n    id = db.Column(db.String(6), primary_key=True)\n    email = db.Column(db.String(255), unique=True, nullable=False)\n    password = db.Column(db.String(255), nullable=False)\n    def __init__(self, email, password, id):\n        \"\"\"",
        "detail": "backend.app.models.user",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "backend.app.models.user",
        "description": "backend.app.models.user",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nclass User(db.Model):\n    \"\"\"\n    Modelo de usuario para la base de datos.\n    \"\"\"\n    __tablename__ = \"users\"\n    id = db.Column(db.String(6), primary_key=True)\n    email = db.Column(db.String(255), unique=True, nullable=False)\n    password = db.Column(db.String(255), nullable=False)\n    def __init__(self, email, password, id):",
        "detail": "backend.app.models.user",
        "documentation": {}
    },
    {
        "label": "swagger_spec",
        "kind": 2,
        "importPath": "backend.app.routes.swagger_routes",
        "description": "backend.app.routes.swagger_routes",
        "peekOfCode": "def swagger_spec():\n    # Usar la aplicación Flask actual\n    \"\"\"\n    Genera el esquema Swagger para las rutas definidas.\n    Endpoint: /swagger\n    Método: GET\n    Retorna:\n        - El esquema Swagger en formato JSON.\n    \"\"\"\n    return jsonify(swagger(current_app))  # Pasar la instancia de la aplicación Flask",
        "detail": "backend.app.routes.swagger_routes",
        "documentation": {}
    },
    {
        "label": "swagger_routes",
        "kind": 5,
        "importPath": "backend.app.routes.swagger_routes",
        "description": "backend.app.routes.swagger_routes",
        "peekOfCode": "swagger_routes = Blueprint(\"swagger\", __name__)\n@swagger_routes.route(\"/swagger\", methods=[\"GET\"])\ndef swagger_spec():\n    # Usar la aplicación Flask actual\n    \"\"\"\n    Genera el esquema Swagger para las rutas definidas.\n    Endpoint: /swagger\n    Método: GET\n    Retorna:\n        - El esquema Swagger en formato JSON.",
        "detail": "backend.app.routes.swagger_routes",
        "documentation": {}
    },
    {
        "label": "list_tasks",
        "kind": 2,
        "importPath": "backend.app.routes.task_routes",
        "description": "backend.app.routes.task_routes",
        "peekOfCode": "def list_tasks():\n    \"\"\"\n    Obtiene todas las tareas del usuario autenticado.\n    Endpoint: /tasks\n    Método: GET\n    ---\n    tags:\n      - Tareas\n    parameters:\n      - name: Authorization",
        "detail": "backend.app.routes.task_routes",
        "documentation": {}
    },
    {
        "label": "add_task",
        "kind": 2,
        "importPath": "backend.app.routes.task_routes",
        "description": "backend.app.routes.task_routes",
        "peekOfCode": "def add_task():\n    \"\"\"\n    Agrega una nueva tarea para el usuario autenticado.\n    Endpoint: /tasks\n    Método: POST\n    Datos de entrada (JSON):\n        - title: Título de la tarea.\n        - description: Descripción de la tarea.\n    ---\n    tags:",
        "detail": "backend.app.routes.task_routes",
        "documentation": {}
    },
    {
        "label": "edit_task",
        "kind": 2,
        "importPath": "backend.app.routes.task_routes",
        "description": "backend.app.routes.task_routes",
        "peekOfCode": "def edit_task(task_id):\n    \"\"\"\n    Actualiza una tarea existente del usuario autenticado.\n    Endpoint: /tasks/<int:task_id>\n    Método: PUT\n    Datos de entrada (JSON):\n        - title: Nuevo título de la tarea (opcional).\n        - description: Nueva descripción de la tarea (opcional).\n        - status: Nuevo estado de la tarea (opcional).\n    ---",
        "detail": "backend.app.routes.task_routes",
        "documentation": {}
    },
    {
        "label": "remove_task",
        "kind": 2,
        "importPath": "backend.app.routes.task_routes",
        "description": "backend.app.routes.task_routes",
        "peekOfCode": "def remove_task(task_id):\n    \"\"\"\n    Elimina una tarea existente del usuario autenticado.\n    Endpoint: /tasks/<int:task_id>\n    Método: DELETE\n    ---\n    tags:\n      - Tareas\n    parameters:\n      - name: Authorization",
        "detail": "backend.app.routes.task_routes",
        "documentation": {}
    },
    {
        "label": "task_routes",
        "kind": 5,
        "importPath": "backend.app.routes.task_routes",
        "description": "backend.app.routes.task_routes",
        "peekOfCode": "task_routes = Blueprint(\"tasks\", __name__)\n@task_routes.route(\"/tasks\", methods=[\"GET\"])\n@jwt_required()\ndef list_tasks():\n    \"\"\"\n    Obtiene todas las tareas del usuario autenticado.\n    Endpoint: /tasks\n    Método: GET\n    ---\n    tags:",
        "detail": "backend.app.routes.task_routes",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "backend.app.routes.user_routes",
        "description": "backend.app.routes.user_routes",
        "peekOfCode": "def register():\n    \"\"\"\n    Endpoint para crear usuario.\n    ---\n    tags:\n      - Autenticación\n    parameters:\n      - name: body\n        in: body\n        required: true",
        "detail": "backend.app.routes.user_routes",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "backend.app.routes.user_routes",
        "description": "backend.app.routes.user_routes",
        "peekOfCode": "def login():\n    \"\"\"\n    Endpoint para iniciar sesión.\n    ---\n    tags:\n      - Autenticación\n    parameters:\n      - name: body\n        in: body\n        required: true",
        "detail": "backend.app.routes.user_routes",
        "documentation": {}
    },
    {
        "label": "user_routes",
        "kind": 5,
        "importPath": "backend.app.routes.user_routes",
        "description": "backend.app.routes.user_routes",
        "peekOfCode": "user_routes = Blueprint(\"users\", __name__)\n@user_routes.route(\"/register\", methods=[\"POST\"])\ndef register():\n    \"\"\"\n    Endpoint para crear usuario.\n    ---\n    tags:\n      - Autenticación\n    parameters:\n      - name: body",
        "detail": "backend.app.routes.user_routes",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "backend.app.routes.version_routes",
        "description": "backend.app.routes.version_routes",
        "peekOfCode": "def home():\n    \"\"\"\n    Endpoint de prueba para verificar que el servidor está funcionando.\n    Endpoint: /version\n    Método: GET\n    ---\n    tags:\n      - Versión\n    responses:\n      200:",
        "detail": "backend.app.routes.version_routes",
        "documentation": {}
    },
    {
        "label": "home_redirect",
        "kind": 2,
        "importPath": "backend.app.routes.version_routes",
        "description": "backend.app.routes.version_routes",
        "peekOfCode": "def home_redirect():\n    \"\"\"\n    Redirige a la versión de la API.\n    Endpoint: /\n    Método: GET\n    \"\"\"\n    return redirect(\"/version\")",
        "detail": "backend.app.routes.version_routes",
        "documentation": {}
    },
    {
        "label": "version_routes",
        "kind": 5,
        "importPath": "backend.app.routes.version_routes",
        "description": "backend.app.routes.version_routes",
        "peekOfCode": "version_routes = Blueprint(\"version\", __name__)\n@version_routes.route(\"/version\", methods=[\"GET\"])\ndef home():\n    \"\"\"\n    Endpoint de prueba para verificar que el servidor está funcionando.\n    Endpoint: /version\n    Método: GET\n    ---\n    tags:\n      - Versión",
        "detail": "backend.app.routes.version_routes",
        "documentation": {}
    },
    {
        "label": "get_tasks",
        "kind": 2,
        "importPath": "backend.app.services.task_services",
        "description": "backend.app.services.task_services",
        "peekOfCode": "def get_tasks(user_id):\n    \"\"\"\n    Obtiene todas las tareas del usuario autenticado.\n    Retorna:\n        - Una lista de tareas.\n    \"\"\"\n    tasks = Task.query.filter_by(user_id=user_id).all()\n    return jsonify([task.to_dict() for task in tasks]), 200\ndef create_task(data, user_id):\n    \"\"\"",
        "detail": "backend.app.services.task_services",
        "documentation": {}
    },
    {
        "label": "create_task",
        "kind": 2,
        "importPath": "backend.app.services.task_services",
        "description": "backend.app.services.task_services",
        "peekOfCode": "def create_task(data, user_id):\n    \"\"\"\n    Agrega una nueva tarea para el usuario autenticado.\n    Datos de entrada:\n        - title: Título de la tarea.\n        - description: Descripción de la tarea.\n    Retorna:\n        - Un mensaje de confirmación.\n    \"\"\"\n    new_task = Task(",
        "detail": "backend.app.services.task_services",
        "documentation": {}
    },
    {
        "label": "update_task",
        "kind": 2,
        "importPath": "backend.app.services.task_services",
        "description": "backend.app.services.task_services",
        "peekOfCode": "def update_task(data, user_id, task_id):\n    \"\"\"\n    Actualiza una tarea existente del usuario autenticado.\n    Datos de entrada:\n        - title: Nuevo título de la tarea (opcional).\n        - description: Nueva descripción de la tarea (opcional).\n        - status: Nuevo estado de la tarea (opcional).\n    Retorna:\n        - Un mensaje de confirmación.\n    \"\"\"",
        "detail": "backend.app.services.task_services",
        "documentation": {}
    },
    {
        "label": "delete_task",
        "kind": 2,
        "importPath": "backend.app.services.task_services",
        "description": "backend.app.services.task_services",
        "peekOfCode": "def delete_task(user_id, task_id):\n    \"\"\"\n    Elimina una tarea existente del usuario autenticado.\n    Retorna:\n        - Un mensaje de confirmación.\n    \"\"\"\n    task = Task.query.filter_by(id=task_id, user_id=user_id).first()\n    if task:\n        db.session.delete(task)\n        db.session.commit()",
        "detail": "backend.app.services.task_services",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "backend.app.services.user_services",
        "description": "backend.app.services.user_services",
        "peekOfCode": "def create_user(data):\n    \"\"\"\n    Registra un nuevo usuario.\n    Datos de entrada:\n        - email: Dirección de correo electrónico del usuario.\n        - password: Contraseña del usuario.\n    Retorna:\n        - Un mensaje de confirmación.\n    \"\"\"\n    new_user = User(email=data[\"email\"], password=data[\"password\"], id=f'U{str(db.session.query(User).count() + 1).zfill(4)}')",
        "detail": "backend.app.services.user_services",
        "documentation": {}
    },
    {
        "label": "access_user",
        "kind": 2,
        "importPath": "backend.app.services.user_services",
        "description": "backend.app.services.user_services",
        "peekOfCode": "def access_user(data):\n    \"\"\"\n    Inicia sesión de un usuario.\n    Datos de entrada:\n        - email: Dirección de correo electrónico del usuario.\n        - password: Contraseña del usuario.\n    Retorna:\n        - Un mensaje de confirmación.\n    \"\"\"\n    user = User.query.filter_by(email=data[\"email\"]).first()",
        "detail": "backend.app.services.user_services",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "backend.app.config",
        "description": "backend.app.config",
        "peekOfCode": "class Config:\n    \"\"\"\n    Configuración para la aplicación.\n    Atributos:\n        SQLALCHEMY_DATABASE_URI (str): URI de la base de datos para SQLAlchemy.\n        JWT_SECRET_KEY (str): Clave secreta para la generación de JWT.\n        SQLALCHEMY_TRACK_MODIFICATIONS (bool): Desactiva el seguimiento de modificaciones de objetos para ahorrar memoria.\n    \"\"\"\n    SQLALCHEMY_DATABASE_URI = f\"mysql+pymysql://{os.getenv('DB_USER')}:{os.getenv('DB_PASSWORD')}@localhost/{os.getenv('DB_NAME')}\"\n    JWT_SECRET_KEY = os.getenv(\"JWT_SECRET\")",
        "detail": "backend.app.config",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "backend.app.extensions",
        "description": "backend.app.extensions",
        "peekOfCode": "db = SQLAlchemy()\njwt = JWTManager()",
        "detail": "backend.app.extensions",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": "backend.app.extensions",
        "description": "backend.app.extensions",
        "peekOfCode": "jwt = JWTManager()",
        "detail": "backend.app.extensions",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.wsgi",
        "description": "backend.wsgi",
        "peekOfCode": "app = create_app()\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "backend.wsgi",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    }
]